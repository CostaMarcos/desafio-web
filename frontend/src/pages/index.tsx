import { useEffect, useState } from "react";
import Head from "next/head";
import dayjs from "dayjs";
import { authService } from "@/services";
import { useLogout } from "@/hooks/auth/useLogout";
import { Task } from "@/types/task";
import ModalEdit from "@/components/modalEdit";

const api = authService.instance;

export default function Home() {
  const [newTask, setNewTask] = useState("");
  const { logout } = useLogout();

  const [tasks, setTasks] = useState<Task[]>([]);
  const [archivedTasks, setArchivedTasks] = useState<Task[]>([]);

  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedTask, setSelectedTask] = useState<Task | null>(null);

  const loadTasks = () => {
    api
      .get("/tasks/")
      .then((res) => {
        const data: Task[] = res.data;
        setTasks(
          data
            .filter((t) => t.status !== "A")
            .sort((a, b) => {
              let list = ["P", "D"];
              return list.indexOf(a.status) - list.indexOf(b.status);
            })
        );
        setArchivedTasks(data.filter((t) => t.status === "A"));
      })
      .catch((e) => {
        console.log(e);
      });
  };

  useEffect(() => {
    loadTasks();
  }, []);

  const addTask = () => {
    if (newTask) {
      api
        .post("/tasks/", {
          description: newTask,
          status: "P",
          due_date: dayjs(new Date()).format("YYYY-MM-DD"),
        })
        .then((res) => {
          loadTasks();
        })
        .catch((e) => {
          console.log(e);
        });
    }
  };

  const setTaskStatus = (task: Task, status: string) => {
    api.put(`/tasks/${task.id}`, { ...task, status }).then((res) => {
      loadTasks();
    });
  };

  const deleteTask = (id: number) => {
    api.delete(`/tasks/${id}`).then((res) => {
      loadTasks();
    });
  };

  const openEditModal = (task: Task) => {
    setSelectedTask(task);
    setShowEditModal(true);
  };

  const editTask = (task: Task) => {
    api.put(`/tasks/${task.id}`, task).then((res) => {
      setShowEditModal(false);
      loadTasks();
    });
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-full w-full bg-indigo-500 pt-4">
        <button
          onClick={logout}
          className="ml-4 absolute flex justify-center rounded-md border border-transparent bg-red-600 hover:bg-red-700 py-2 px-4 text-sm font-medium text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
          Logout
        </button>
        <div className="h-full w-full flex items-center justify-center bg-indigo-500">
          <div className="bg-white rounded shadow p-6 m-4 w-full lg:w-3/4 lg:max-w-4xl">
            <div className="mb-4">
              <h1 className="text-grey-darkest font-bold">Todo List</h1>
              <div className="flex mt-4">
                <input
                  className="shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker"
                  placeholder="Add Todo"
                  value={newTask}
                  onChange={(e) => setNewTask(e.target.value)}
                />
                <button
                  onClick={addTask}
                  className="relative flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                >
                  Add
                </button>
              </div>
            </div>
            <div>
              {tasks.length > 0 ? tasks.map((task) => (
                <div
                  key={task.id}
                  className="flex mb-4 items-center cursor-pointer"
                >
                  <input
                    id={`checkbox-${task.id}`}
                    type="checkbox"
                    className="mr-2 w-6 h-6 accent-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                    checked={task.status === "D"}
                    readOnly
                    onClick={() =>
                      setTaskStatus(task, task.status === "D" ? "P" : "D")
                    }
                  />
                  <label
                    htmlFor={`checkbox-${task.id}`}
                    className={`w-full text-grey-darkest ${
                      task.status === "D" ? "line-through" : ""
                    }`}
                  >
                    <p>{task.description}</p><p className="text-sm text-gray-500">{task.due_date}</p>
                  </label>
                  <button
                    type="button"
                    className="min-w-max p-2 ml-2 mr-2 border-2 rounded hover:text-white text-blue-600 border-blue-600 hover:bg-blue-600"
                    onClick={() => openEditModal(task)}
                  >
                    Edit
                  </button>
                  <button
                    type="button"
                    onClick={() => deleteTask(task.id)}
                    className="w-auto p-2 ml-2 border-2 rounded text-red-600 border-red-600 hover:text-white hover:bg-red-600"
                  >
                    Remove
                  </button>
                </div>
              )) : <p className="text-gray-500">No tasks</p>}

              <h1 className="font-bold mt-4">Archived</h1>

              {archivedTasks.length > 0 ? archivedTasks.map((task) => (
                <div key={task.id} className="flex mb-4 items-center">
                  <div
                    className={"w-full text-grey-darkest"}
                  >
                    <p>{task.description}</p><p className="text-sm text-gray-500">{task.due_date}</p>
                  </div>
                  <button
                    type="button"
                    className="min-w-max p-2 ml-4 mr-2 border-2 rounded hover:text-white text-gray-600 border-gray-600 hover:bg-gray-600"
                    onClick={() => setTaskStatus(task, "P")}
                  >
                    Unarchive
                  </button>
                  <button
                    type="button"
                    onClick={() => deleteTask(task.id)}
                    className="w-auto p-2 ml-2 border-2 rounded text-red-600 border-red-600 hover:text-white hover:bg-red-600"
                  >
                    Remove
                  </button>
                </div>
              )) : <p className="text-gray-500">No archived tasks</p>}
            </div>
          </div>
        </div>
        <ModalEdit show={showEditModal} setShow={setShowEditModal} selectedTask={selectedTask} onConfirm={editTask} />
      </main>
    </>
  );
}
